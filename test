import dash
import dash_core_components as dcc
import dash_html_components as html
import plotly.graph_objects as go
import pandas as pd
import sqlite3
import talib

app = dash.Dash(__name__)

# 讀取股票資料庫中的資料，並轉換成 pandas.DataFrame 格式
def read_data_from_sqlite(stock_code):
    with sqlite3.connect('stocks.db') as conn:
        df = pd.read_sql(f"SELECT * FROM '{stock_code}'", conn, index_col='Date', parse_dates=['Date'])
    return df

# 建立股票代號下拉式選單的選項
stock_code_options = [{'label': '台積電', 'value': '2330.TW'},
                      {'label': '群創', 'value': '2385.TW'}]

# 建立 Dash 畫面的布局
app.layout = html.Div(
    style={'backgroundColor': 'black'},
    children=[
        html.H1('股票 K 線圖', style={'color': 'white'}),
        html.Div([
            html.Label('選擇股票代號：', style={'color': 'white'}),
            dcc.Dropdown(id='stock-code-dropdown', options=stock_code_options, value='2330.TW', style={'color': 'black'})
        ]),
        html.Div([
            # K 線圖模塊
            html.Div([
                dcc.Graph(id='stock-candlestick-graph')
            ], className='eight columns', style={'height': 'calc(100% - 30px)','backgroundColor': '#000000'}) # 加上 style 屬性來設定高度
        ], className='row', style={'height': 'calc(50% - 15px)'}),
        html.Div([
            # MACD 模塊
            html.Div([
                dcc.Graph(id='stock-macd-graph')
            ], className='four columns'),
            # RSI 模塊
            html.Div([
                dcc.Graph(id='stock-rsi-graph')
            ], className='four columns'),
            # Volume 模塊
            html.Div([
                dcc.Graph(id='stock-volume-graph')
            ], className='six columns')
        ], className='row'),
        html.Div([
            # KD 模塊
            html.Div([
                dcc.Graph(id='stock-kd-graph')
            ], className='four columns')
        ], className='row')
    ]
)

# 更新股票 K 線圖的 callback 函式
@app.callback(
    dash.dependencies.Output('stock-candlestick-graph', 'figure'),
    [dash.dependencies.Input('stock-code-dropdown', 'value')])
def update_candlestick_graph(stock_code):
    df = read_data_from_sqlite(stock_code)
    # 繪製 K 線圖
    fig = go.Figure(data=[go.Candlestick(x=df.index,
                                         open=df['Open'],
                                         high=df['High'],
                                         low=df['Low'],
                                         close=df['Close'])])
    fig.update_layout(title=f'K 線圖 ({stock_code})')
    return fig

    # 更新股票 Volume 的 callback 函式
@app.callback(
    dash.dependencies.Output('stock-volume-graph', 'figure'),
    [dash.dependencies.Input('stock-code-dropdown', 'value')])
def update_volume_graph(stock_code):
    df = read_data_from_sqlite(stock_code)
    # 計算 Volume MA
    vol_ma_5 = df['Volume'].rolling(window=5).mean()
    vol_ma_10 = df['Volume'].rolling(window=10).mean()
    vol_ma_20 = df['Volume'].rolling(window=20).mean()

    # 繪製 Volume 圖
    fig = go.Figure()
    fig.add_trace(go.Bar(x=df.index, y=df['Volume'], name='Volume'))
    fig.add_trace(go.Scatter(x=df.index, y=vol_ma_5, name='MA5'))
    fig.add_trace(go.Scatter(x=df.index, y=vol_ma_10, name='MA10'))
    fig.add_trace(go.Scatter(x=df.index, y=vol_ma_20, name='MA20'))
    fig.update_layout(title=f'成交量 ({stock_code})',
                      xaxis_rangeslider_visible=False,
                      yaxis_title='成交量')
    return fig

# 建立 MACD 圖表的 callback 函式
@app.callback(
    dash.dependencies.Output('stock-macd-graph', 'figure'),
    [dash.dependencies.Input('stock-code-dropdown', 'value')])
def update_macd_graph(stock_code):
    df = read_data_from_sqlite(stock_code)
    # 計算 MACD 指標
    macd, macdsignal, macdhist = talib.MACD(df['Close'])

    # 繪製 MACD 圖表
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=macd, name='MACD'))
    fig.add_trace(go.Scatter(x=df.index, y=macdsignal, name='MACD Signal'))
    fig.add_trace(go.Bar(x=df.index, y=macdhist, name='MACD Hist'))
    fig.update_layout(title=f'MACD ({stock_code})',
                      xaxis_rangeslider_visible=False,
                      yaxis_title='MACD')
    return fig

# 建立 RSI 圖表的 callback 函式
@app.callback(
    dash.dependencies.Output('stock-rsi-graph', 'figure'),
    [dash.dependencies.Input('stock-code-dropdown', 'value')])
def update_rsi_graph(stock_code):
    df = read_data_from_sqlite(stock_code)
    # 計算 RSI 指標
    rsi = talib.RSI(df['Close'])

    # 繪製 RSI 圖表
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=rsi, name='RSI'))
    fig.add_shape(type='line', x0=df.index[0], x1=df.index[-1], y0=70, y1=70, line=dict(color='red', width=2))
    fig.add_shape(type='line', x0=df.index[0], x1=df.index[-1], y0=30, y1=30, line=dict(color='red', width=2))
    fig.update_layout(title=f'RSI ({stock_code})',
                      xaxis_rangeslider_visible=False,
                      yaxis_title='RSI')
    return fig

# 建立 KD 圖表的 callback 函式
@app.callback(
    dash.dependencies.Output('stock-kd-graph', 'figure'),
    [dash.dependencies.Input('stock-code-dropdown', 'value')])
def update_kd_graph(stock_code):
    df = read_data_from_sqlite(stock_code)
    # 計算 KD 指標
    k, d = talib.STOCH(df['High'], df['Low'], df['Close'])

    # 繪製 KD 圖表
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=k, name='K'))
    fig.add_trace(go.Scatter(x=df.index, y=d, name='D'))
    fig.update_layout(title=f'KD ({stock_code})',
                      xaxis_rangeslider_visible=False,
                      yaxis_title='KD')
    return fig

if __name__ == '__main__':
    app.run_server(debug=True)
